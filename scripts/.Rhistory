artists <- c("Porter Robinson", "Madeon", "1788-L", "Joyryde", "Skrillex")
songs <- c("It's OK", "Shelter", "First Time")
plays <- c(1202398. 3209, 485930, 302389)
plays <- c(1202398, 3209, 485930, 302389)
db <- data.frame(artists, songs, plays)
db <- data.frame(artists, songs, plays, stringsAsFactors = FALSE)
plays <- c(1209, 234989, 20939)
artists <- ("Dabin", "Porter Robinson", "Seven Lions")
artists <- ("Dabin", "Porter Robinson", "Seven Lions")
artists <- c("Dabin", "Porter Robinson", "Seven Lions")
db <- data.frame(artists, songs, plays, stringsAsFactors = FALSE)
View(db)
db <- data.frame(artists, songs, plays)
db2 <- data.frame(artists, songs, plays)
View(db2)
?rownames
gci_api_key <- "AIzaSyAuzBbDMEsgbAzdAY0A-mkGCyFJ0rKnJL0"
pc_api_key <- "Jidt0aYdkgfnitXVPLOXy2C9m2O4k4tEJtc5LDGj"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "/", address)
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "/representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "/", address)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "/", address)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?", address, "&", api_key)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?address=", address, "&key=", api_key)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
uri_full
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
uri_full
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31 Ave NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31 Ave NE Seattle WA 98105"
uri_full
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31 Ave. NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
address <- "1263 Pacific Ave. Kansas city KS 66102"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
address <- "5514 31st Ave. NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
# A GitHub search for `dplyr`
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
# Use fromJSON to parse
response_text <- content(response, "text")
response <- GET(url_full)
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
response <- GET(url_full)
library(HTTR)
library(httr)
response <- GET(url_full)
# Use fromJSON to parse
response_text <- content(response, "text")
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
library(jsonlite)
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
# Use fromJSON to parse
response_text <- content(response, "text")
response_text
response
response_text
url_full
# A GitHub search for `dplyr`
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", gsub(" ", "%20", address)
url_full
# A GitHub search for `dplyr`
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", gsub(" ", "%20", address))
url_full
response <- GET(url_full)
# Use fromJSON to parse
response_text <- content(response, "text")
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
response_text
response_data
# is it a data frame already?
is.data.frame(response_data)  # FALSE
View(response_data)
my_address <- "5514 31st Ave. NE Seattle WA 98105"
query_params <- list(key = api_key, address = my_address)
url_full <- paste0(base_url, endpoint)
query_params <- list(key = api_key, address = my_address)
response <- GET(url_full, query = query_params)
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
View(response_data)
# extract the (useful) data
officials <- response_data$officials
View(officials)
officials_processed <- select(officials, name, position, party, emails, phones, photoUrl)
library(dplyr)
officials_processed <- select(officials, name, position, party, emails, phones, photoUrl)
officials_processed <- select(officials, name, party, emails, phones, photoUrl)
View(officials_processed)
offices <- response_data$offices
View(offices)
offices <- response_data$
# select only official name and index
# sort by index
# add to processed
offices_processed <- select(offices, name, officialindices)
offices <- response_data$offices
offices_processed <- select(offices, name, officialindices)
offices_processed <- select(offices, name, officialIndices)
View(offices_processed)
shiny::runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
is.list(colnames(midwest))
is.vector(colnames(midwest))
midwest[, !names(midwest) %in% c("PID", "county", "inmetro", "category")]
colnames(midwest[, !names(midwest) %in% c("PID", "county", "inmetro", "category")])
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
midwest[[popdensity]]
midwest[["popdensity"]]
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
midwest[[, popdensity]]
midwest[["area"]]
shiny::runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
average_by_neighbourhood <- function(data) {
# Imports the names of the neighborhoods.
neighbourhoods <- read.csv("data/neighbourhoods.csv",
stringsAsFactors = FALSE)
group_by(data, neighbourhood) %>%
summarise_all(funs(mean)) %>%
left_join(neighbourhoods)
}
library(dplyr)
library(treemap)
library(htmlwidgets)
library(data.tree)
library(d3treeR)
average_by_neighbourhood <- function(data) {
# Imports the names of the neighborhoods.
neighbourhoods <- read.csv("data/neighbourhoods.csv",
stringsAsFactors = FALSE)
group_by(data, neighbourhood) %>%
summarise_all(funs(mean)) %>%
left_join(neighbourhoods)
}
# "build_treemap" takes in a dataframe, which is assumed to be the InsideAirbnb
# "listings" dataset, and a variable to plot, which can be the following:
# price, availability_365, number_of_reviews_ minimum_nights.
# Will construct an interactive treemap.
build_treemap <- function(listings, neighourhoods, variable) {
# Get relevant columns
filtered <- select(listings, neighbourhood, price, minimum_nights,
number_of_reviews, availability_365)
# Get averages and associate neighbourhood with its neighbourhood group
averages <- average_by_neighbourhood(filtered)
# Assigns appropriate unit for description depending on question variable
unit <- ""
if (variable == "price") unit <- " dollars per night"
if (variable == "minimum_nights") unit <- " minimum nights to stay"
if (variable == "number_of_reviews") unit <- " reviews"
if (variable == "availability_365") unit <- " days of the year available"
# Gives every entry the appropriate label
averages$label <- paste0(averages$neighbourhood, " (",
round(averages[[variable]]), " ", unit, ")")
# Builds a regular treemap using the "treemap" library.
tm <- treemap(averages,
index = c("neighbourhood_group", "label"),
vSize = variable,
vColor = "neighbourhood_group",
type = "categorical",
palette = "Set2",
title = paste0("Average ", variable, " of airbnbs in Seattle."),
fontsize.title = 14,
algorithm = "squarified"
)
# Uses the previous treemap to build an interactive treemap.
# Uses the "d3treeR" library, not found in CRAN.
# Source of resources required for this function
# is found at the top of the file.
d3tree2(tm, rootname = paste0("Average ", variable,
" of airbnbs for different areas in Seattle."))
}
build_treemap(listings, "price")
listings <- read.csv("data/listings.csv", stringsAsFactors = FALSE)
setwd("~/Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization/scripts")
listings <- read.csv("data/listings.csv", stringsAsFactors = FALSE)
listings <- read.csv("../data/listings.csv", stringsAsFactors = FALSE)
build_treemap(listings, "price")
average_by_neighbourhood <- function(data) {
# Imports the names of the neighborhoods.
neighbourhoods <- read.csv("../data/neighbourhoods.csv",
stringsAsFactors = FALSE)
group_by(data, neighbourhood) %>%
summarise_all(funs(mean)) %>%
left_join(neighbourhoods)
}
build_treemap(listings, "price")
build_treemap <- function(listings, variable) {
# Get relevant columns
filtered <- select(listings, neighbourhood, price, minimum_nights,
number_of_reviews, availability_365)
# Get averages and associate neighbourhood with its neighbourhood group
averages <- average_by_neighbourhood(filtered)
# Assigns appropriate unit for description depending on question variable
unit <- ""
if (variable == "price") unit <- " dollars per night"
if (variable == "minimum_nights") unit <- " minimum nights to stay"
if (variable == "number_of_reviews") unit <- " reviews"
if (variable == "availability_365") unit <- " days of the year available"
# Gives every entry the appropriate label
averages$label <- paste0(averages$neighbourhood, " (",
round(averages[[variable]]), " ", unit, ")")
# Builds a regular treemap using the "treemap" library.
tm <- treemap(averages,
index = c("neighbourhood_group", "label"),
vSize = variable,
vColor = "neighbourhood_group",
type = "categorical",
palette = "Set2",
title = paste0("Average ", variable, " of airbnbs in Seattle."),
fontsize.title = 14,
algorithm = "squarified"
)
# Uses the previous treemap to build an interactive treemap.
# Uses the "d3treeR" library, not found in CRAN.
# Source of resources required for this function
# is found at the top of the file.
d3tree2(tm, rootname = paste0("Average ", variable,
" of airbnbs for different areas in Seattle."))
}
build_treemap(listings, "price")
# price, availability_365, number_of_reviews_ minimum_nights.
# Will construct an interactive treemap.
build_treemap <- function(listings, variable="price") {
# Get relevant columns
filtered <- select(listings, neighbourhood, price, minimum_nights,
number_of_reviews, availability_365)
# Get averages and associate neighbourhood with its neighbourhood group
averages <- average_by_neighbourhood(filtered)
# Assigns appropriate unit for description depending on question variable
unit <- ""
if (variable == "price") unit <- " dollars per night"
if (variable == "minimum_nights") unit <- " minimum nights to stay"
if (variable == "number_of_reviews") unit <- " reviews"
if (variable == "availability_365") unit <- " days of the year available"
# Gives every entry the appropriate label
averages$label <- paste0(averages$neighbourhood, " (",
round(averages[[variable]]), " ", unit, ")")
# Builds a regular treemap using the "treemap" library.
tm <- treemap(averages,
index = c("neighbourhood_group", "label"),
vSize = variable,
vColor = "neighbourhood_group",
type = "categorical",
palette = "Set2",
title = paste0("Average ", variable, " of airbnbs in Seattle."),
fontsize.title = 14,
algorithm = "squarified"
)
# Uses the previous treemap to build an interactive treemap.
# Uses the "d3treeR" library, not found in CRAN.
# Source of resources required for this function
# is found at the top of the file.
d3tree2(tm, rootname = paste0("Average ", variable,
" of airbnbs for different areas in Seattle."))
}
build_treemap(listings)
build_treemap(listings, "number_of_reviews")
shiny::runApp('~/Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(lintr)
setwd("~/Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization/scripts")
lint("build_treemap.r")
lint("build_treemap.r")
library(stringr)
style_file("build_treemap.r")
style("build_treemap.r")
library(styler)
style("build_treemap.r")
style_file("build_treemap.r")
lint("build_treemap.r")
