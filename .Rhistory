a <- select(df, as.Date(df$last_review))
a <- select(df, as.Date(df$last_review))
a <- select(df, as.Date(last_review))
a <- select(df, last_review)
a <- select(df, last_review)
a <- as.Date(a)
a <- as.Date(a$last_review)
a <- select(df, last_review)
date <- as.Date("2018-11-01"
date <- as.Date("2018-11-01")
date <- as.Date("2018-11-01")
a <- filter(a , last_review >= date )
b <- df[df$last_review == min(df$last_review), ]
b
View(b)
b <- filter(df, last_review > 0)
b <- df[df$last_review == min(df$last_review), ]
View(b)
b <- filter(df, last_review != "")
b <- df[df$last_review == min(df$last_review), ]
b <- filter(df, last_review != NA)
b <- df[df$last_review == min(df$last_review), ]
View(b)
runApp()
runApp()
runApp()
runApp()
View(plot_data)
plot_data <- full_join(df_group, (aggregate(paste(x_axis, "~", nb_grouping), df, mean)), paste("by =", nb_grouping))
c <- aggregate(price ~ neighbourhood, df, mean)
c <- aggregate(price ~ neighbourhood, df, mean)
View(c)
c <- aggregate(price ~ neighbourhood, df, average)
c <- aggregate(price ~ room_type, df, mean)
c <- aggregate(price ~ neighbourhood_group, df, mean)
build_plot <- function(df, nb_grouping, x_axis) {
plot_data <- full_join(df_group, aggregate(as.formula(paste(x_axis
,"~", nb_grouping), df, mean), as.formula(paste("by =", nb_grouping))))
}
df <- read.csv("data/listings.csv", stringsAsFactors = F)
df <- read.csv("data/listings.csv", stringsAsFactors = F)
nbr_group <- "Ballard"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
View(nbr_group)
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
View(plot_data)
plot_data <- full_join(plot_data, aggregate(availability_365 ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
nbr_group <- "Other neighbourhoods"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
plot_data <- full_join(plot_data, aggregate(availability_365 ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
nbr_group <- "Other neighbourhoods"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
nbr_group <- "University District"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
plot_data <- full_join(plot_data, aggregate(availability_365 ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
x_axis = "price"
build_plot <- function(df, x_axis, price) {
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(paste(x_axis, "~ neighbourhood_group"), df, mean),
by = "neighbourhood_group")
}
x_axis = "price"
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(paste(x_axis, "~ neighbourhood_group"), df, mean),
by = "neighbourhood_group")
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(as.function(paste(x_axis, "~ neighbourhood_group")), df, mean),
by = "neighbourhood_group")
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(as.formula(paste(x_axis, "~ neighbourhood_group")), df, mean),
by = "neighbourhood_group")
View(plot_data)
x_axis <- plot_data[[input$x_axis]]
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x_axis, y =  number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y2)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x_axis, y =  ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y2)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
library(plotly)
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x_axis, y =  ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = ~x_axis, y =  ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = ~x_axis, y = ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
~x_axis, ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
~x_axis, ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x, y =  number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = "cyan")) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
x <- plot_data[[input$x_axis]]
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x, y =  number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = "cyan")) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
y1 <- plot_data[["number_of_reviews"]]
View(y1)
runApp()
shiny::runApp()
devtools::install_github("gluc/data.tree")
devtools::install_github("timelyportfolio/d3treeR")
library(dplyr)
library(treemap)
library(htmlwidgets)
library(data.tree)
library(d3treeR)
# "average_by_neighbourhood" takes in a dataframe, which is assumed to be
# the InsideAirbnb "listings" dataset, and the neighbourhoods dataset
# associated with the listings. Then, it will use it to compute averages
# and associate neighbourhood with its neighbourhood group
average_by_neighbourhood <- function(data, neighbourhoods) {
group_by(data, neighbourhood) %>%
summarise_all(funs(mean)) %>%
left_join(neighbourhoods)
}
# "build_treemap" takes in a dataframe, which is assumed to be the InsideAirbnb
# "listings" dataset, the neighbourhoods dataset associated with the listings,
# and a variable to plot, which can be the following:
# price, availability_365, number_of_reviews_ minimum_nights.
# Will construct an interactive treemap.
build_treemap <- function(listings, neighbourhoods, variable = "price") {
# Get relevant columns
filtered <- select(
listings, neighbourhood, price, minimum_nights,
number_of_reviews, availability_365
)
# Get averages and associate neighbourhood with its neighbourhood group
averages <- average_by_neighbourhood(filtered, neighbourhoods)
# Assigns appropriate unit for description depending on question variable
unit <- ""
if (variable == "price") unit <- " dollars per night"
if (variable == "minimum_nights") unit <- " minimum nights to stay"
if (variable == "number_of_reviews") unit <- " reviews"
if (variable == "availability_365") unit <- " days of the year available"
# Gives every entry the appropriate label
averages$label <- paste0(
averages$neighbourhood, "\n (",
round(averages[[variable]]), " ", unit, ")"
)
# Builds a regular treemap using the "treemap" library.
tm <- treemap(averages,
index = c("neighbourhood_group", "label"),
vSize = variable,
vColor = "neighbourhood_group",
type = "categorical",
palette = "Set2",
fontsize.title = 14,
algorithm = "squarified"
)
# Builds a d3treemap2
# Uses the previous treemap to build an interactive treemap.
# Uses the "d3treeR" library, not found in CRAN.
# Source of resources required for this function
# is found at the top of the file.
tm2 <- d3tree2(tm,
rootname = paste0(
"Average ",
variable,
" of airbnbs for different areas in Seattle."
)
)
return(tm2)
}
runApp()
build_plot <- function(df, x_axis) {
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(paste(x_axis, "~ neighbourhood_group"), df, mean),
by = "neighbourhood_group")
x1 <- plot_data[[input$x_axis]]
y1 <- plot_data[["number_of_reviews"]]
xtext <- "Price"
if(input$x_axis == "availability_365") {
xtext <- "Year-round Availability"
} else if (input$x_axis == "reviews_per_month") {
xtext <- "Reviews per Month"
}
p <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x1, y =  y1, text = ~paste0(neighbourhood_group),
marker = list(
size = 11,
color = y1)) %>%
layout(title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE))
return(p)
}
build_plot(read.csv("data/listings.csv"), "price")
build_plot <- function(df, x_axis) {
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(as.formula(paste(x_axis, "~ neighbourhood_group")), df, mean),
by = "neighbourhood_group")
x1 <- plot_data[[input$x_axis]]
y1 <- plot_data[["number_of_reviews"]]
xtext <- "Price"
if(input$x_axis == "availability_365") {
xtext <- "Year-round Availability"
} else if (input$x_axis == "reviews_per_month") {
xtext <- "Reviews per Month"
}
p <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x1, y =  y1, text = ~paste0(neighbourhood_group),
marker = list(
size = 11,
color = y1)) %>%
layout(title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE))
return(p)
}
build_plot(read.csv("data/listings.csv"), "price")
runApp()
runApp()
runApp()
lintr::lint("built_plot.R")
lintr::lint(build_plot.R)
lintr::lint(build_plot)
lintr::lint("scrips/build_plot.R")
setwd(dir)
lintr::lint("build_plot.R")
lintr::lint(build_map.R)
lintr::lint("server.R")
lintr::lint("ui.R")
lintr::lint("ui.R")
lintr::lint("ui.R")
lintr::lint("server.R")
lintr::lint("scripts/build_plot.R")
lintr::lint("scripts/build_plot.R")
lintr::lint("scripts/build_plot.R")
lintr::lint("scripts/build_map.R")
lintr::lint("scripts/build_map.R")
lintr::lint("scripts/build_map.R")
shiny::runApp()
library(dplyr)
library(treemap)
library(htmlwidgets)
library(data.tree)
library(d3treeR)
build_plot <- function(df, x_axis) {
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group,
df, mean),
aggregate(paste(x_axis, "~ neighbourhood_group"),
df, mean),
by = "neighbourhood_group")
x1 <- plot_data[[x_axis]]
y1 <- plot_data[["number_of_reviews"]]
xtext <- "Price"
if (x_axis == "availability_365") {
xtext <- "Year-round Availability"
} else if (x_axis == "reviews_per_month") {
xtext <- "Reviews per Month"
}
p <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x1, y =  y1, text = ~paste0(neighbourhood_group),
marker = list(
size = 11,
color = y1)) %>%
layout(title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE))
return(p)
}
listings <- read.csv("data/listings.csv", stringsAsFactors = FALSE)
x_axis <- "price"
build_plot(listings, x_axis)
build_plot <- function(df, x_axis) {
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group,
df, mean),
aggregate(as.formula(paste(x_axis, "~ neighbourhood_group")),
df, mean),
by = "neighbourhood_group")
x1 <- plot_data[[x_axis]]
y1 <- plot_data[["number_of_reviews"]]
xtext <- "Price"
if (x_axis == "availability_365") {
xtext <- "Year-round Availability"
} else if (x_axis == "reviews_per_month") {
xtext <- "Reviews per Month"
}
p <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x1, y =  y1, text = ~paste0(neighbourhood_group),
marker = list(
size = 11,
color = y1)) %>%
layout(title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE))
return(p)
}
build_plot(listings, x_axis)
shiny::runApp()
build_plot <- function(df, x_axis) {
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group,
df, mean),
aggregate(as.formula(paste(x_axis, "~ neighbourhood_group")),
df, mean),
by = "neighbourhood_group")
x1 <- plot_data[[x_axis]]
y1 <- plot_data[["number_of_reviews"]]
xtext <- "Price"
if (x_axis == "availability_365") {
xtext <- "Year-round Availability"
} else if (x_axis == "reviews_per_month") {
xtext <- "Reviews per Month"
}
p <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x1, y =  y1, text = ~paste0(neighbourhood_group),
marker = list(
size = 11,
color = y1)) %>%
layout(title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE))
return(p)
}
listings
x_axis
x <- "reviews_per_month"
build_plot(listings, x)
library(dplyr)
library(plotly)
build_plot(listings, x)
lintr::lint("scripts/build_plot.R")
library(d3treeR2)
devtools::install_github("timelyportfolio/d3treeR2")
devtools::install_github("timelyportfolio/d3treeR")
force = TRUE
shiny::runApp()
shiny::runApp()
library(d3treeR)
runApp()
library(dplyr)
library(stringr)
listings_exp <- read.csv("data/listings.csv.gz", stringsAsFactors = FALSE)
df <- select(listings_exp, price)
View(df)
df$price <- as.numeric(gsub("[$,]", "", df$price))
shiny::runApp()
runApp()
library(dpylr)
df <- select(listings_exp, price)
library(dplyr)
df <- select(listings_exp, price)
df$price <- as.numeric(gsub("[$,]", "", df$price))
View(df)
sum <- add(df$price)
sum <- sum(df$price)
sum
library(dplyr)
df <- select(listings_exp, price)
df$price <- as.numeric(gsub("[$, ]", "", df$price))
View(df)
sum <- sum(df$price)
sum
df <- select(listings_exp, price)
df$price <- as.numeric(gsub("[$,]", "", df$price))
sum <- sum(df$price)
print(sum)
lintr::lint("scripts/build_plot.R")
lintr::lint("scripts/build_plot.R")
p <- plot_ly(
data = plot_data, type = "scatter", mode = "markers",
x = x1, y = y1, text = ~ paste0(neighbourhood_group_cleansed, " - ", xtext, ": ", ~x, ", No. of Reviews: ", ~y),
marker = list(
size = 11,
color = y1
)
) %>%
layout(
title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE)
)
build_plot <- function(df, x_axis) {
# Removing the $ sign to be able to calculate the mean price
if (x_axis == "price") {
df$price <- as.numeric(gsub("[$, ]", "", df$price))
}
plot_data <- full_join(aggregate(
number_of_reviews ~ neighbourhood_group_cleansed,
df, mean
),
aggregate(
as.formula(paste(
x_axis,
"~ neighbourhood_group_cleansed"
)),
df, mean
),
by = "neighbourhood_group_cleansed"
)
x1 <- plot_data[[x_axis]]
y1 <- plot_data[["number_of_reviews"]]
xtext <- "Price"
if (x_axis == "availability_365") {
xtext <- "Year-round Availability"
} else if (x_axis == "reviews_per_month") {
xtext <- "Reviews per Month"
} else if (x_axis == "review_scores_rating") {
xtext <- "Overall Review Scores"
}
p <- plot_ly(
data = plot_data, type = "scatter", mode = "markers",
x = x1, y = y1, text = ~ paste0(neighbourhood_group_cleansed, " - ", xtext, ": ", ~x, ", No. of Reviews: ", ~y),
marker = list(
size = 11,
color = y1
)
) %>%
layout(
title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE)
)
return(p)
}
runApp()
runApp()
runApp()
runApp()
runApp()
lintr::lint("scripts/build_plot.R")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(listings_exp)
listings_exp <- read.csv("data/listings.csv.gz", stringsAsFactors = FALSE)
View(listings_exp)
runApp()
runApp()
runApp()
