"Pancreatic cancer", "Road injuries", "Other cardiovascular and circulatory diseases","Hypertensive heart disease")
num_deaths <- c(5.448323e+05, 2.388951e+05, 1.914620e+05, 1.771955e+05, 1.637929e+05,
9.599246e+04, 8.253946e+04, 7.929680e+04, 7.145021e+04, 4.932721e+04, 4.660644e+04,
4.625284e+04, 4.467170e+04, 4.223361e+04, 4.020373e+04)
?data.frame
deaths_df <- data.frame(cause_name, num_deaths)
View(deaths_df)
plot(deaths_df)
?plot()
plot(deaths_df, type = "p")
library(tidyverse)
deaths_df %>%
ggplot(aes(x = cause_name)) +
geom_point()
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_point()
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_point() +
theme(axis.text.x = element_text(angle = 30))
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_point() +
theme(axis.text.x = element_text(angle = 30)) +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"))
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_point() +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"))
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_point() +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"))
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_point() +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"))+
labs(title = "position encoding")
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_bar() +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"))+
labs(title = "length encoding")
deaths_df %>%
ggplot(aes(x = cause_name)) +
geom_bar() +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"))+
labs(title = "length encoding")
deaths_df %>%
ggplot(aes(x = cause_name, y = num_deaths)) +
geom_histogram() +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"))+
labs(title = "length encoding")
deaths_df %>%
ggplot(aes(x = cause_name)) +
geom_histogram() +
scale_x_discrete(label = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"))+
labs(title = "length encoding")
library(tidyverse)
library(knitr)
library(kableExtra)
library(httr)
library(jsonlite)
source("api-keys.R")
source("civic-info.R")
source("propublica.R")
remove(base_uri)
remove(endpoint)
remove(query_pa)
remove(query_params)
remove(response)
remove(parsed_data)
# Begin by making a request for all members of the house of representatives
# at the  /members endpoint. The ProPublica API is a bit particular in how
# it requires that you make requests. Rather than specify arguments, you'll
# need to construct a request string. For example, to request members you'll
# need to construct this URL:
#
# https://api.propublica.org/congress/v1/members/{chamber}/{state}/current.json
#
# Create a variable that stores the base URI (as a string) for the
# Pro Publica API
pp_base_uri <- "https://api.propublica.org/congress/v1"
# Request all members of the House of representatives at the /members endpoint.
pp_endpoint <- "/members"
# You'll replace {state} and  {chamber} with your values (the state
# abbreviation, and the word "house" -- removing the curly braces).
# You'll also need to specify your API key as a header using this syntax
# (a bit different than what's in the course book):
#
pp_response <- GET(pp_endpoint, {chamber}=="house", {state}==state_address, add_headers("X-API-Key" = pp_apikey))
# You'll replace {state} and  {chamber} with your values (the state
# abbreviation, and the word "house" -- removing the curly braces).
# You'll also need to specify your API key as a header using this syntax
# (a bit different than what's in the course book):
#
pp_response <- GET(pp_endpoint, {chamber}=="house", {state}=state_address, add_headers("X-API-Key" = pp_apikey))
# You'll replace {state} and  {chamber} with your values (the state
# abbreviation, and the word "house" -- removing the curly braces).
# You'll also need to specify your API key as a header using this syntax
# (a bit different than what's in the course book):
#
pp_response <- GET(pp_endpoint, {chamber}=="house", {state}=~state_address, add_headers("X-API-Key" = pp_apikey))
# You'll replace {state} and  {chamber} with your values (the state
# abbreviation, and the word "house" -- removing the curly braces).
# You'll also need to specify your API key as a header using this syntax
# (a bit different than what's in the course book):
#
pp_response <- GET(pp_endpoint, {chamber}=="house", {state}==~state_address, add_headers("X-API-Key" = pp_apikey))
# You'll replace {state} and  {chamber} with your values (the state
# abbreviation, and the word "house" -- removing the curly braces).
# You'll also need to specify your API key as a header using this syntax
# (a bit different than what's in the course book):
#
pp_response <- GET(pp_endpoint, {chamber}=="house", add_headers("X-API-Key" = pp_apikey))
View(linked_gci_reps)
# address of choice
address <- "14 East Cache La Poudre Street, Colorado Springs, CO"
#state-specific address of choice
state_address <- "CO"
gci_apikey <- "AIzaSyDvzlgHBMw3vyeDUQh7rPx2Rx9zoZDMV4o"
pp_apikey <- "HbK6EVBdhkQxrsEIgwOTT7TfvDd6xJD5s0IcvptZ"
# Load necessary packages
library(httr)
library(jsonlite)
library(dplyr)
# google civic info api key and address of choice
source("api-keys.R")
print(gci_apikey)
print(address)
# Create a variable that stores the base URI (as a string) for the
# Google Civic Info API (https://www.googleapis.com/civicinfo/v2)
gci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
# Request the representatives for your address from the /representatives endpoint.
gci_endpoint <- "/representatives"
gci_query_params <- list(address = address, key = gci_apikey)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
gci_response <- GET(paste0(gci_base_uri, gci_endpoint), query = gci_query_params)
print(gci_response)
gci_parsed_data <- fromJSON(content(gci_response, "text"))
# Data wrangling
offices <- gci_parsed_data$offices
officials <- gci_parsed_data$officials
# copied from canvas a6 description
num_to_rep <- unlist(lapply(gci_parsed_data$offices$officialIndices, length))
# expand `offices` df by number of elements in `officialIndices` column
expanded <- offices[rep(row.names(offices), num_to_rep),]
# mutate `index` column in `expanded` offices df and rename `position` column
expanded <- expanded %>%
mutate(index = row_number() -1) %>%
rename(position = name)
# mutate `index` column in `officials` df
officials <- officials %>% mutate(index = row_number() -1)
# Then, join officials and offices by `index` column to get full df
gci_joined_df <- full_join(officials, expanded, by = "index")
# Select relevant columns
gci_reps <- gci_joined_df %>%
select(name, urls, position, party, emails, phones, photoUrl)
# Total number of representatives
num_gci_reps <- nrow(gci_reps)
# Table of Representatives:
# Name hyperlinked
# Current Position
# Party Affiliation
# Email hyperlinked
# Phone number
# Photo (URL)
linked_gci_reps <- gci_reps
linked_gci_reps$name <- ifelse(linked_gci_reps$urls=="NULL", linked_gci_reps$name, paste0("[", linked_gci_reps$name, "](", linked_gci_reps$urls, ")"))
linked_gci_reps$emails <- ifelse(linked_gci_reps$emails=="NULL", "Not available", paste0("[", linked_gci_reps$emails, "](mailto:", linked_gci_reps$emails, ")"))
linked_gci_reps$photoUrl <- ifelse(is.na(linked_gci_reps$photoUrl), "Not available", paste0("<img src='", linked_gci_reps$photoUrl, "' style='height:100px'>"))
# Load necessary packages
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(scales)
# google civic info api key and address of choice
source("api-keys.R")
pp_apikey
state_address
## House of Representatives Charts
# The second section you create should be on the House of Representatives.
# Using the ProPublica API(in your propublica.R script), you will get all
# members of the House of Representatives from the state corresponding to
# the address indicated. Note: for simplicity's sake, you can just create
# another variable with the two-letter abbreviation for the state that
# corresponds with your address.
#
# Begin by making a request for all members of the house of representatives
# at the  /members endpoint. The ProPublica API is a bit particular in how
# it requires that you make requests. Rather than specify arguments, you'll
# need to construct a request string. For example, to request members you'll
# need to construct this URL:
#
# https://api.propublica.org/congress/v1/members/{chamber}/{state}/current.json
#
# Create a variable that stores the base URI (as a string) for the
# Pro Publica API
pp_base_uri <- "https://api.propublica.org/congress/v1"
# Request all members of the House of representatives at the /members endpoint.
pp_endpoint <- "/members"
pp_response <- GET(paste0(pp_base_uri, pp_endpoint, "/house/", state_address, "/current.json"), add_headers("X-API-Key" = pp_apikey))
pp_parsed_data <- fromJSON(content(pp_response, "text"))
pp_reps <- flatten(pp_parsed_data$results)
## Two Charts
# Reps by Gender (male vs female)
plot_pp_reps_by_gender <- pp_reps %>%
ggplot(aes(x = gender)) +
geom_bar() +
labs(title = "Representatives by Gender", x = "Gender", y = "# of Representatives") +
scale_x_discrete(labels = c("F" = "Females", "M" = "Males")) +
coord_flip()
# Reps by Party (republican vs democratic)
plot_pp_reps_by_party <- pp_reps %>%
ggplot(aes(x = party)) +
geom_bar() +
labs(title = "Representatives by Party", x = "Party", y = "# of Representatives") +
scale_x_discrete(labels = c("D" = "Democrats", "R" = "Republicans")) +
coord_flip()
## Selected Representative Information
# Age
# Twitter (link)
# The percentage of time they agree with a vote (i.e., they vote yes on a vote
# that passes, or they vote no on a vote that fails)
# Note, the votes endpoint will only return the most recent 20 votes, which is
# fine.
# First of the members for given state-specific address
first_pp_reps <- pp_reps[1,]
# specific member
# https://api.propublica.org/congress/v1/members/{member}.json
member_pp_response <- GET(paste0(pp_base_uri, pp_endpoint, "/", first_pp_reps$id, ".json"), add_headers("X-API-Key" = pp_apikey))
member_pp_parsed_data <- fromJSON(content(member_pp_response, "text"))
member_pp_reps <- flatten(member_pp_parsed_data$results)
# specific member's vote positions (voting patterns)
# https://api.propublica.org/congress/v1/members/{member}/votes.json
member_vote_pp_response <- GET(paste0(pp_base_uri, pp_endpoint, "/", first_pp_reps$id, "/votes.json"), add_headers("X-API-Key" = pp_apikey))
member_vote_pp_parsed_data <- fromJSON(content(member_vote_pp_response, "text"))
member_vote_pp_reps <- flatten(member_vote_pp_parsed_data$results$votes[[1]])
# Name of specific member
name_first_pp_reps <- first_pp_reps$name
# Pronoun of specific member based on gender
pronoun <- if(first_pp_reps$gender == "F"){
print("her")
} else {
print("him")
}
# Age of specific member
age_member_pp_reps <- floor(interval(as.Date(member_pp_reps$date_of_birth), today()) / duration(num=1, unit = "years"))
# Twitter handle (hyperlinked)
twitter_member_pp_reps <- cell_spec(member_pp_reps$twitter_account, "html", link = (paste0("https://twitter.com/", member_pp_reps$twitter_account)))
# Percentage of member positions in accordance with voting results
percentage_accordance <- nrow(filter(member_vote_pp_reps,
(result %in% c("Passed", "Agreed to") & position == "Yes") |
(result == "Failed" & position == "No"))) / nrow(member_vote_pp_reps) * 100
# Load necessary packages
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(scales)
# Load necessary packages
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(scales)
# google civic info api key and address of choice
source("api-keys.R")
pp_apikey
state_address
## House of Representatives Charts
# The second section you create should be on the House of Representatives.
# Using the ProPublica API(in your propublica.R script), you will get all
# members of the House of Representatives from the state corresponding to
# the address indicated. Note: for simplicity's sake, you can just create
# another variable with the two-letter abbreviation for the state that
# corresponds with your address.
#
# Begin by making a request for all members of the house of representatives
# at the  /members endpoint. The ProPublica API is a bit particular in how
# it requires that you make requests. Rather than specify arguments, you'll
# need to construct a request string. For example, to request members you'll
# need to construct this URL:
#
# https://api.propublica.org/congress/v1/members/{chamber}/{state}/current.json
#
# Create a variable that stores the base URI (as a string) for the
# Pro Publica API
pp_base_uri <- "https://api.propublica.org/congress/v1"
# Request all members of the House of representatives at the /members endpoint.
pp_endpoint <- "/members"
pp_response <- GET(paste0(pp_base_uri, pp_endpoint, "/house/", state_address, "/current.json"), add_headers("X-API-Key" = pp_apikey))
pp_parsed_data <- fromJSON(content(pp_response, "text"))
pp_reps <- flatten(pp_parsed_data$results)
## Two Charts
# Reps by Gender (male vs female)
plot_pp_reps_by_gender <- pp_reps %>%
ggplot(aes(x = gender)) +
geom_bar() +
labs(title = "Representatives by Gender", x = "Gender", y = "# of Representatives") +
scale_x_discrete(labels = c("F" = "Females", "M" = "Males")) +
coord_flip()
# Reps by Party (republican vs democratic)
plot_pp_reps_by_party <- pp_reps %>%
ggplot(aes(x = party)) +
geom_bar() +
labs(title = "Representatives by Party", x = "Party", y = "# of Representatives") +
scale_x_discrete(labels = c("D" = "Democrats", "R" = "Republicans")) +
coord_flip()
## Selected Representative Information
# Age
# Twitter (link)
# The percentage of time they agree with a vote (i.e., they vote yes on a vote
# that passes, or they vote no on a vote that fails)
# Note, the votes endpoint will only return the most recent 20 votes, which is
# fine.
# First of the members for given state-specific address
first_pp_reps <- pp_reps[1,]
# specific member
# https://api.propublica.org/congress/v1/members/{member}.json
member_pp_response <- GET(paste0(pp_base_uri, pp_endpoint, "/", first_pp_reps$id, ".json"), add_headers("X-API-Key" = pp_apikey))
member_pp_parsed_data <- fromJSON(content(member_pp_response, "text"))
member_pp_reps <- flatten(member_pp_parsed_data$results)
# specific member's vote positions (voting patterns)
# https://api.propublica.org/congress/v1/members/{member}/votes.json
member_vote_pp_response <- GET(paste0(pp_base_uri, pp_endpoint, "/", first_pp_reps$id, "/votes.json"), add_headers("X-API-Key" = pp_apikey))
member_vote_pp_parsed_data <- fromJSON(content(member_vote_pp_response, "text"))
member_vote_pp_reps <- flatten(member_vote_pp_parsed_data$results$votes[[1]])
# Name of specific member
name_first_pp_reps <- first_pp_reps$name
# Pronoun of specific member based on gender
pronoun <- if(first_pp_reps$gender == "F"){
print("her")
} else {
print("him")
}
# Age of specific member
age_member_pp_reps <- floor(interval(as.Date(member_pp_reps$date_of_birth), today()) / duration(num=1, unit = "years"))
# Twitter handle (hyperlinked)
twitter_member_pp_reps <- cell_spec(member_pp_reps$twitter_account, "html", link = (paste0("https://twitter.com/", member_pp_reps$twitter_account)))
# Percentage of member positions in accordance with voting results
percentage_accordance <- nrow(filter(member_vote_pp_reps,
(result %in% c("Passed", "Agreed to") & position == "Yes") |
(result == "Failed" & position == "No"))) / nrow(member_vote_pp_reps) * 100
getwd()
getwd()
setwd("~/Documents/INFO201/seattle-airbnbs-visualization")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
listings_exp <- read.csv("data/listings_exp.csv")
listings_exp$price <- as.numeric(gsub("[$, ]", "", listings_exp$price))
amenities <- listings_exp %>%
separate_rows(amenities, sep = ",")
amenities$amenities <- gsub("[{\"}]", "", amenities$amenities)
amenities <- amenities %>% group_by(id) %>%
summarise(count = n())
df <- full_join(amenities, listings_exp)
runApp()
?geom_smooth
runApp()
runApp()
head(df) %>% arrange(price)
runApp()
listings_exp %>%
View(listings_exp)
View(listings_exp)
colnames(listings_exp)
listings_exp %>%
group_by(neighbourhood_group_cleansed) %>%
summarize(count = n()) %>%
head()
listings_exp %>%
group_by(neighbourhood_group_cleansed) %>%
summarize(count = n())
head()
listings_exp %>%
group_by(neighbourhood_group_cleansed) %>%
summarize(count = n()) %>%
arrange(count)
runApp()
listings_exp %>%
group_by(neighbourhood_group_cleansed) %>%
dfasdfa
listings_exp %>%
dasfafds
listings_exp %>%
arrange(desc(price))
# Imports the listings of Airbnbs
listings <- read.csv("data/listings.csv", stringsAsFactors = FALSE)
View(listings)
listings %>%
group_by(neighbourhood_group) %>%
summarize(avgprice = mean(price, na.rm = T))
listings %>%
group_by(neighbourhood_group) %>%
summarize(avgprice = mean(price, na.rm = T)) %>%
arrange(desc(avgprice))
listings %>%
filter(room_type == "Entire home/apt") %>%
group_by(neighbourhood_group) %>%
summarize(count = n()) %>%
arrange(desc(count))
ent <- listings %>%
filter(room_type == "Entire home/apt") %>%
group_by(neighbourhood_group) %>%
summarize(count = n()) %>%
arrange(desc(count))
priv <- listings %>%
filter(room_type == "Private room") %>%
group_by(neighbourhood_group) %>%
summarize(count = n()) %>%
arrange(desc(count))
unique(listings$room_type)
shared <- listings %>%
filter(room_type == "Shared room") %>%
group_by(neighbourhood_group) %>%
summarize(count = n()) %>%
arrange(desc(count))
View(ent)
View(priv)
View(shared)
names(ent$count) <- "ent_count"
View(ent)
names(ent$count) <- ent_count
View(ent)
names(ent)[2] <- "ent_count"
names(priv)[2] <- "priv_count"
names(shared)[2] <- "shared_count"
?full_join
join <- full_join(priv, shared)
View(join)
join <- full_join(join, ent)
runApp()
View(join)
runApp()
?mutate
join <- join %>%
mutate(total_count = priv_count+shared_count+ent_count)
join <- join %>%
mutate(total_count = priv_count+shared_count+ent_count, na.rm = T)
join <- join
join <- remove(join$na.rm)
remove(join$na.rm)
join <- join[1:4]
join <- join %>%
is.na == 0
join <- full_join(priv, shared)
join <- full_join(join, ent)
View(join)
is.na(join) <- 0
join[is.na(join)] <- 0
join <- full_join(priv, shared)
join <- full_join(join, ent)
join1 <- join
join[is.na(join)] <- 0
View(join1)
join <- join %>%
mutate(total_count = priv_count+shared_count+ent_count)
library(plotly)
plot_ly(
x = join$neighbourhood_group,
y = join$ent_count,
type = "bar",
text = paste0(
round(join$ent_count/join$total_count, digits = 4) * 100,
"%"
),
name = "Entire"
) %>%
add_trace(
y = join$priv_count,
text = paste0(round(join$priv_count/join$total_count,
digits = 4
) * 100, "%"),
name = "Private"
) %>%
add_trace(
y = join$shared_count,
text = paste0(round(join$shared_count/join$total_count,
digits = 4
) * 100, "%"),
name = "Shared"
) %>%
layout(
title = "Room Types by Neighbourhood Groups",
xaxis = list(title = "Neighbourhood Group"),
yaxis = list(title = "Room Type"), barmode = "stack"
) %>%
return()
unique(listings$room_type)
runApp()
getwd()
shiny::runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
library(lintr)
lint("ui.R")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
