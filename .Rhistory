<<<<<<< HEAD
artists <- c("Porter Robinson", "Madeon", "1788-L", "Joyryde", "Skrillex")
songs <- c("It's OK", "Shelter", "First Time")
plays <- c(1202398. 3209, 485930, 302389)
plays <- c(1202398, 3209, 485930, 302389)
db <- data.frame(artists, songs, plays)
db <- data.frame(artists, songs, plays, stringsAsFactors = FALSE)
plays <- c(1209, 234989, 20939)
artists <- ("Dabin", "Porter Robinson", "Seven Lions")
artists <- ("Dabin", "Porter Robinson", "Seven Lions")
artists <- c("Dabin", "Porter Robinson", "Seven Lions")
db <- data.frame(artists, songs, plays, stringsAsFactors = FALSE)
View(db)
db <- data.frame(artists, songs, plays)
db2 <- data.frame(artists, songs, plays)
View(db2)
?rownames
gci_api_key <- "AIzaSyAuzBbDMEsgbAzdAY0A-mkGCyFJ0rKnJL0"
pc_api_key <- "Jidt0aYdkgfnitXVPLOXy2C9m2O4k4tEJtc5LDGj"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "/", address)
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "/representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "/", address)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "/", address)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?", address, "&", api_key)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?address=", address, "&key=", api_key)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
uri_full
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
uri_full
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31st Ave NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "&key=", api_key, "?address=", address)
uri_full
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31 Ave NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31 Ave NE Seattle WA 98105"
uri_full
source("api-keys.R")
base_url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- "representatives"
api_key <- gci_api_key
address <- "31 Ave. NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
address <- "1263 Pacific Ave. Kansas city KS 66102"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
address <- "5514 31st Ave. NE Seattle WA 98105"
# A GitHub search for `dplyr`
uri_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
uri_full
# A GitHub search for `dplyr`
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
# Use fromJSON to parse
response_text <- content(response, "text")
response <- GET(url_full)
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", address)
response <- GET(url_full)
library(HTTR)
library(httr)
response <- GET(url_full)
# Use fromJSON to parse
response_text <- content(response, "text")
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
library(jsonlite)
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
# Use fromJSON to parse
response_text <- content(response, "text")
response_text
response
response_text
url_full
# A GitHub search for `dplyr`
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", gsub(" ", "%20", address)
url_full
# A GitHub search for `dplyr`
url_full <- paste0(base_url, endpoint, "?key=", api_key, "&address=", gsub(" ", "%20", address))
url_full
response <- GET(url_full)
# Use fromJSON to parse
response_text <- content(response, "text")
response_data <- fromJSON(response_text)  # extract and parse using the `jsonlite` library
response_text
response_data
# is it a data frame already?
is.data.frame(response_data)  # FALSE
View(response_data)
my_address <- "5514 31st Ave. NE Seattle WA 98105"
query_params <- list(key = api_key, address = my_address)
url_full <- paste0(base_url, endpoint)
query_params <- list(key = api_key, address = my_address)
response <- GET(url_full, query = query_params)
response_text <- content(response, "text")
response_data <- fromJSON(response_text)
View(response_data)
# extract the (useful) data
officials <- response_data$officials
View(officials)
officials_processed <- select(officials, name, position, party, emails, phones, photoUrl)
library(dplyr)
officials_processed <- select(officials, name, position, party, emails, phones, photoUrl)
officials_processed <- select(officials, name, party, emails, phones, photoUrl)
View(officials_processed)
offices <- response_data$offices
View(offices)
offices <- response_data$
# select only official name and index
# sort by index
# add to processed
offices_processed <- select(offices, name, officialindices)
offices <- response_data$offices
offices_processed <- select(offices, name, officialindices)
offices_processed <- select(offices, name, officialIndices)
View(offices_processed)
shiny::runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
is.list(colnames(midwest))
is.vector(colnames(midwest))
midwest[, !names(midwest) %in% c("PID", "county", "inmetro", "category")]
colnames(midwest[, !names(midwest) %in% c("PID", "county", "inmetro", "category")])
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
midwest[[popdensity]]
midwest[["popdensity"]]
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
midwest[[, popdensity]]
midwest[["area"]]
shiny::runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
runApp('Sophomore-Year-UW/INFO201/a8-jsm209')
shiny::runApp('Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization')
=======
a <- select(df, as.Date(df$last_review))
a <- select(df, as.Date(df$last_review))
a <- select(df, as.Date(last_review))
a <- select(df, last_review)
a <- select(df, last_review)
a <- as.Date(a)
a <- as.Date(a$last_review)
a <- select(df, last_review)
date <- as.Date("2018-11-01"
date <- as.Date("2018-11-01")
date <- as.Date("2018-11-01")
a <- filter(a , last_review >= date )
b <- df[df$last_review == min(df$last_review), ]
b
View(b)
b <- filter(df, last_review > 0)
b <- df[df$last_review == min(df$last_review), ]
View(b)
b <- filter(df, last_review != "")
b <- df[df$last_review == min(df$last_review), ]
b <- filter(df, last_review != NA)
b <- df[df$last_review == min(df$last_review), ]
View(b)
runApp()
runApp()
runApp()
runApp()
View(plot_data)
plot_data <- full_join(df_group, (aggregate(paste(x_axis, "~", nb_grouping), df, mean)), paste("by =", nb_grouping))
c <- aggregate(price ~ neighbourhood, df, mean)
c <- aggregate(price ~ neighbourhood, df, mean)
View(c)
c <- aggregate(price ~ neighbourhood, df, average)
c <- aggregate(price ~ room_type, df, mean)
c <- aggregate(price ~ neighbourhood_group, df, mean)
build_plot <- function(df, nb_grouping, x_axis) {
plot_data <- full_join(df_group, aggregate(as.formula(paste(x_axis
,"~", nb_grouping), df, mean), as.formula(paste("by =", nb_grouping))))
}
df <- read.csv("data/listings.csv", stringsAsFactors = F)
df <- read.csv("data/listings.csv", stringsAsFactors = F)
nbr_group <- "Ballard"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
View(nbr_group)
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
View(plot_data)
plot_data <- full_join(plot_data, aggregate(availability_365 ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
nbr_group <- "Other neighbourhoods"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
plot_data <- full_join(plot_data, aggregate(availability_365 ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
nbr_group <- "Other neighbourhoods"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
nbr_group <- "University District"
nbr_group <- df[df$neighbourhood_group == nbr_group, ]
plot_data <- full_join(aggregate(price ~ neighbourhood, nbr_group, mean),
aggregate(number_of_reviews ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
plot_data <- full_join(plot_data, aggregate(availability_365 ~ neighbourhood,
nbr_group, mean),
by = "neighbourhood")
x_axis = "price"
build_plot <- function(df, x_axis, price) {
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(paste(x_axis, "~ neighbourhood_group"), df, mean),
by = "neighbourhood_group")
}
x_axis = "price"
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(paste(x_axis, "~ neighbourhood_group"), df, mean),
by = "neighbourhood_group")
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(as.function(paste(x_axis, "~ neighbourhood_group")), df, mean),
by = "neighbourhood_group")
plot_data <- full_join(aggregate(number_of_reviews ~ neighbourhood_group, df, mean),
aggregate(as.formula(paste(x_axis, "~ neighbourhood_group")), df, mean),
by = "neighbourhood_group")
View(plot_data)
x_axis <- plot_data[[input$x_axis]]
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x_axis, y =  number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y2)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x_axis, y =  ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y2)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
library(plotly)
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x_axis, y =  ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = ~x_axis, y =  ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = ~x_axis, y = ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
~x_axis, ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
~x_axis, ~number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = y)) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x, y =  number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = "cyan")) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
x <- plot_data[[input$x_axis]]
plot <- plot_ly(data = plot_data, type = "scatter", mode = "markers",
x = x, y =  number_of_reviews, text = ~paste0(state),
marker = list(
size = 11,
color = "cyan")) %>%
layout(title = "Comparison of the Population of Races",
yaxis = list(title = p2ytext, zeroline = FALSE),
xaxis = list(title = p2xtext, zeroline = FALSE))
y1 <- plot_data[["number_of_reviews"]]
View(y1)
runApp()
shiny::runApp()
devtools::install_github("gluc/data.tree")
devtools::install_github("timelyportfolio/d3treeR")
>>>>>>> 0e8f7108a0203e5677e146fdf4a3571d43cbf00e
library(dplyr)
library(treemap)
library(htmlwidgets)
library(data.tree)
library(d3treeR)
runApp('Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization')
shiny::runApp('Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization')
library(d3tree)
library(d3treeR)
runApp('Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization')
listings_exp <- read_csv("data/listings_exp.csv")
listings_exp <- read.csv("data/listings_exp.csv")
setwd("~/Sophomore-Year-UW/INFO201/seattle-airbnbs-visualization")
listings_exp <- read.csv("data/listings_exp.csv")
shiny::runApp()
runApp()
runApp()
library(dplyr)
library(stringr)
listings_exp <- read.csv("data/listings.csv.gz", stringsAsFactors = FALSE)
df <- select(listings_exp, price)
View(df)
df$price <- as.numeric(gsub("[$,]", "", df$price))
shiny::runApp()
runApp()
library(dpylr)
df <- select(listings_exp, price)
library(dplyr)
df <- select(listings_exp, price)
df$price <- as.numeric(gsub("[$,]", "", df$price))
View(df)
sum <- add(df$price)
sum <- sum(df$price)
sum
library(dplyr)
df <- select(listings_exp, price)
df$price <- as.numeric(gsub("[$, ]", "", df$price))
View(df)
sum <- sum(df$price)
sum
df <- select(listings_exp, price)
df$price <- as.numeric(gsub("[$,]", "", df$price))
sum <- sum(df$price)
print(sum)
lintr::lint("scripts/build_plot.R")
lintr::lint("scripts/build_plot.R")
p <- plot_ly(
data = plot_data, type = "scatter", mode = "markers",
x = x1, y = y1, text = ~ paste0(neighbourhood_group_cleansed, " - ", xtext, ": ", ~x, ", No. of Reviews: ", ~y),
marker = list(
size = 11,
color = y1
)
) %>%
layout(
title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE)
)
build_plot <- function(df, x_axis) {
# Removing the $ sign to be able to calculate the mean price
if (x_axis == "price") {
df$price <- as.numeric(gsub("[$, ]", "", df$price))
}
plot_data <- full_join(aggregate(
number_of_reviews ~ neighbourhood_group_cleansed,
df, mean
),
aggregate(
as.formula(paste(
x_axis,
"~ neighbourhood_group_cleansed"
)),
df, mean
),
by = "neighbourhood_group_cleansed"
)
x1 <- plot_data[[x_axis]]
y1 <- plot_data[["number_of_reviews"]]
xtext <- "Price"
if (x_axis == "availability_365") {
xtext <- "Year-round Availability"
} else if (x_axis == "reviews_per_month") {
xtext <- "Reviews per Month"
} else if (x_axis == "review_scores_rating") {
xtext <- "Overall Review Scores"
}
p <- plot_ly(
data = plot_data, type = "scatter", mode = "markers",
x = x1, y = y1, text = ~ paste0(neighbourhood_group_cleansed, " - ", xtext, ": ", ~x, ", No. of Reviews: ", ~y),
marker = list(
size = 11,
color = y1
)
) %>%
layout(
title = paste("Comparison Between No. of Reviews and", xtext),
yaxis = list(title = "No. of Reviews", zeroline = FALSE),
xaxis = list(title = xtext, zeroline = FALSE)
)
return(p)
}
runApp()
runApp()
runApp()
runApp()
runApp()
lintr::lint("scripts/build_plot.R")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(listings_exp)
listings_exp <- read.csv("data/listings.csv.gz", stringsAsFactors = FALSE)
View(listings_exp)
runApp()
runApp()
runApp()
shiny::runApp()
